
初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。

	$ git status
	$ git diff readme.txt 

时光穿梭机
	$ git log
	$ git log --pretty=oneline
	$ git reset --hard HEAD^
	$ git reset --hard HEAD^^
	$ git reset --hard HEAD~100
	

	$ git reflog

    $ git checkout -- readme.txt
    命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    总之，就是让这个文件回到最近一次git commit或git add时的状态。

删除   
    $ git rm test.txt


SSH
	$ ssh-keygen -t rsa -C "youremail@example.com"
    $ git remote add origin git@github.com:michaelliao/learngit.git
    $ git push -u origin master

    $ git push origin master

    要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
    关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
    此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

克隆
	$ git clone git@github.com:michaelliao/gitskills.git    


创建与合并分支
   查看分支：git branch
   创建分支：git branch <name>
   切换分支：git checkout <name>
   创建+切换分支：git checkout -b <name>
   合并某分支到当前分支：git merge <name>
   删除分支：git branch -d <name>


解决冲突
   $ git checkout -b feature1
   $ git add readme.txt 
   $ git commit -m "AND simple"

   $ git checkout master
   $ git add readme.txt 

   $ git merge feature1
   自动提示我们当前master分支比远程的master分支要超前1个提交。
   $ git add readme.txt 
   $ git commit -m "& simple"

   $ git merge feature1
   这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突

   $ git status
   git status也可以告诉我们冲突的文件

   可以直接查看readme.txt的内容：
   <<<<<<< HEAD
   Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容

   再提交：
	$ git add readme.txt 
	$ git commit -m "conflict fixed"

   最后，删除feature1分支：
    $ git branch -d feature1
    
   用带参数的git log也可以看到分支的合并情况：
   $ git log --graph --pretty=oneline --abbrev-commit



   多人协作：
   $git remote --v

   $git push orgin master
